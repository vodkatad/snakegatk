include: "../conf.sk"
include: "./conf.sk"

subworkflow aligncalibrateflow:
    workdir: "../align_calibrate"
    snakefile: "../align_calibrate/Snakefile"

rule mutectpaired:
    input: bamdelta=aligncalibrateflow("../align_calibrate/realigned_{sampledelta}.bam"), gnomad=GNOMAD+"/af-only-gnomad.hg38.vcf.gz", reference=DATA_DIR+"/GRCh38.d1.vd1.fa", bamref=aligncalibrateflow("../align_calibrate/realigned_{sampleref}.bam")
    output: vcf="{sampledelta}-{sampleref}.vcf.gz"
    singularity: GATK_SING
    params: loweraf=LOWERAF, vcf="{sampledelta}-{sampleref}.vcf.gz"
    shell: 
        """
            gatk Mutect2 -tumor {wildcards.sampledelta} -I {input.bamdelta} -normal {wildcards.sampleref} -I {input.bamref} -R {input.reference} -O {params.vcf} --germline-resource {input.gnomad}
        """

#https://software.broadinstitute.org/gatk/documentation/tooldocs/4.1.0.0/org_broadinstitute_hellbender_tools_walkers_contamination_GetPileupSummaries.php
rule getpileup:
    input: bam=aligncalibrateflow("../align_calibrate/realigned_{sample}.bam"), gnomad=GNOMAD+"/gnomad.forcontamination.exomes.vcf"
    output: "{sample}.pileup.table"
    singularity: GATK_SING
    shell: 
        """
            gatk GetPileupSummaries -I {input.bam} -V {input.gnomad} -O {output} -L {input.gnomad}
        """

rule calculatecontamination:
    input: delta="{sampledelta}.pileup.table", ref="{sampleref}.pileup.table"
    output: "{sampledelta}-{sampleref}.contamination.table"
    singularity: GATK_SING
    shell:
        """
            gatk CalculateContamination  -I {input.delta} -matched {input.ref} -O {output}
        """

rule filtercalls:
    input: vcf="{sampledelta}-{sampleref}.vcf.gz"
    output: vcf="{sampledelta}-{sampleref}.filtered.vcf.gz", stats="{sampledelta}-{sampleref}_filtering_stats.tsv"
    singularity: GATK_SING
    shell:
        """
            gatk FilterMutectCalls -V {input.vcf} -O {output.vcf} --stats {output.stats}
        """

rule filtercallsinterval:
    input: vcf="{sampledelta}-{sampleref}.vcf.gz", interval="/work/egrassi/WXS/local/share/data/resources_broad_hg38_v0_wgs_calling_regions.hg38.interval_list"
    output: vcf="{sampledelta}-{sampleref}.filtered_limited.vcf.gz", stats="{sampledelta}-{sampleref}_filtering_stats.tsv"
    singularity: GATK_SING
    shell:
        """
            gatk FilterMutectCalls -V {input.vcf} -O {output.vcf} --stats {output.stats} -L {input.interval}
        """

rule filterallcalls:
    input: vcf="all.vcf.gz"
    output: vcf="all.filtered.vcf.gz", stats="all_filtering_stats.tsv"
    singularity: GATK_SING
    shell:
        """
            gatk FilterMutectCalls -V {input.vcf} -O {output.vcf} --stats {output.stats}
        """
    
# XXX better to adopt a not conflicting naming convention or use patterns in wildcards (negation did not work in 2017)?
ruleorder: single_sample_table > passFilter > filtercallsinterval > filtercalls > mutectpaired

#- artifacts: removed bed interval due to format requirements and who cares and dbsnp due to a nullpointerexception (...)
rule artifacts:
    input: bam=aligncalibrateflow("../align_calibrate/realigned_{sample}.bam"), reference=DATA_DIR+"/GRCh38.d1.vd1.fa"
    output: "{sample}.artifacts.pre_adapter_summary_metrics"
    singularity: GATK_SING
    shell:
        """
            gatk CollectSequencingArtifactMetrics -R {input.reference} -I {input.bam} -O {wildcards.sample}.artifacts
        """

rule filterOrientation:
    input: vcf="{sample}.filtered.vcf.gz", artifact="{sample}.artifacts.pre_adapter_detail_metrics"
    output: vcf="{sample}.bifiltered.vcf.gz"
    singularity: GATK_SING
    shell:
        """
            gatk FilterByOrientationBias --artifact-modes G/T -P {input.artifact} -V {input.vcf} -O {output}
        """

# We remove the POP_AF=1, they are SNP where the reference is mutated, all gnomad has alternate allele, not a somatic mutation
# I think.
# has been fixed in gatk 4.1.1.0:
# https://github.com/broadinstitute/gatk/pull/5535/commits/4b405e4e7dfe187dd3c039ceb2d26863e8634903
rule passFilter:
    input: "{sampledelta}-{sampleref}.filtered_limited.vcf.gz"
    output: "{sampledelta}-{sampleref}.pass.vcf.gz"
    shell:
        """
        zcat {input} |  awk '/^#/ || $7=="PASS"' | bgzip > {output}
        tabix {output}
        """ 

#rule sufficient_coverage_outof_strict:
#    input: aligncalibrateflow("../align_calibrate/depth/{sample}.outof.bed.gz"), aligncalibrateflow("../align_calibrate/depth/{sample}.exons.bed.gz")
#    output: "callable_strict_{sample}.bed"
#    params: callable=CALLABLE_STRICT
#    shell: 
#        """
#         zcat {input} | filter_1col 4 <(echo {params.callable} | tr "," "\\n") |  sort -k1,1 -k2,2n | bedtools merge -i - > {output}
#        """

rule merge:
    input: vcf=expand("{sampledelta}-"+REF+".pass.vcf.gz", sampledelta=SAMPLESD), bed=expand("callable_strict_{sample}.bed", sample=SAMPLES)
    output: vcf="merged.vcf", mbed="merged_strict.bed"
    params: nsamples=len(SAMPLES), samps=SAMPS
    shell:
        """
            bedtools multiinter -i {input.bed} | bawk '$4=={params.nsamples}' | bedtools merge -i - > {output.vcf}.tmp.bed
            bcftools merge --force-samples -R {output.vcf}.tmp.bed --missing-to-ref -m none -i DP:avg,TLOD:min,CONTQ:min,GERMQ:min -o {output.vcf}.tmp.vcf {input.vcf}
            bcftools view -s {params.samps} {output.vcf}.tmp.vcf > {output.vcf}
            mv {output.vcf}.tmp.bed {output.mbed}
            rm {output.vcf}.tmp.vcf
        """

################
rule single_sample_table:
    input: "{sampledelta}-"+REF+".pass.vcf.gz"
    output: table="ss_{sampledelta}_table", vcf="{sampledelta}-"+REF+".ids.vcf.gz"
    shell:
        """
            bcftools view -s {wildcards.sampledelta} {input} | bcftools annotate -I +'%CHROM:%POS:%REF:%ALT' - | bgzip > {output.vcf}
            zcat {output.vcf} | grep -v "^##" |  perl -ane '@gt=splice(@F,9,1); $gt=""; foreach $g (@gt) {{ if ($.==1) {{$gt.=$g."\\t";}} else {{ @afs = split(":",$g); if ($afs[2] eq ".") {{$afs[2]=0;}} $gt.=$afs[2]."\\t";}} }} chop($gt) ; print $F[2]."\\t".$gt."\\n";' | grep -v "," | tee >(bawk 'NR==1' > {output.table}) | sed 1d | sort | uniq > {output.table}.tmp
            cat {output.table}.tmp >> {output.table}
            rm {output.table}.tmp
        """

rule stats:
    input: "{sampledelta}-"+REF+".ids.vcf.gz"
    output: "{sampledelta}.stats"
    shell:
        """
            bcftools stats {input} > {output}
        """ 

rule plotstats:
    input: "{sampledelta}.stats"
    output: "{sampledelta}.plots/plh"
    params: name=NAME
    shell:
        """
            plot-vcfstats -p {wildcards.sampledelta}.plots {input} -T {params.name}
            touch {output}
        """
#############

rule VEP:
    input: "merged.vcf"
    output: txt="merged.vep.txt", html="merged.vep.stats.html", vcf="merged.vcf.id"
    params: cd=VEP_CACHE_DIR
    shell:
        """
             bcftools annotate -I +'%CHROM:%POS:%REF:%ALT' {input} > {output.vcf}
             vep -i {output.vcf} --cache --dir_cache {params.cd} --output_file {output.txt} --stats_file {output.html} --pick
        """

rule vcf_to_aftable:
    input: "merged.vcf.id"
    output: table="merged.table_nomultiallele"
    params: nsamples=len(SAMPLESD)
    shell:
        """
            cat {input} | grep -v "^##" |  perl -ane '@gt=splice(@F,9,{params.nsamples}); $gt=""; foreach $g (@gt) {{ if ($.==1) {{$gt.=$g."\\t";}} else {{ @afs = split(":",$g); if ($afs[2] eq ".") {{$afs[2]=0;}} $gt.=$afs[2]."\\t";}} }} chop($gt) ; print $F[2]."\\t".$gt."\\n";' | grep -v "," | tee >(bawk 'NR==1' > {output.table}) | sed 1d | sort | uniq > {output.table}.tmp
            cat {output.table}.tmp >> {output.table}
        """

# TODO fixme order is not what I though...
rule table:
    input: vcf="{sample}-"+REF+".pass.vcf.gz"
    output: "{sample}-"+REF+".pass.table.gz"
    params: nsamples=len(SAMPLES)
    shell:
        """
      zcat {input} | grep -v "^##" |  perl -ane '@gt=splice(@F,9,{params.nsamples}); $gt=""; foreach $g (@gt) {{ if ($.==1) {{$gt.=$g."\\t";}} else {{ @afs = split(":",$g); if ($afs[2] eq ".") {{$afs[2]=0;}} $gt.=$afs[2]."\\t";}} }} chop($gt) ; print $F[2]."\\t".$gt."\\n";' | grep -v "," | gzip > {output}
        """

rule neutral_sottoriva:
    input: afmatrix="{sample}-"+REF+".pass.table.gz"
    params: debug=DEBUG, afcolumn="{sample}"
    output: hist="{sample}.hist.{loweraf}_{higheraf}.pdf", fit="{sample}.fit.{loweraf}_{higheraf}.pdf", r2="{sample}.fit.{loweraf}_{higheraf}.r2"
    script: SRC_DIR+"/neutral_sottoriva.R"

