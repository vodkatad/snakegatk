ROOT='/home/egrassi'
import os
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,".PRJ_ROOT")):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception("Can not find the PRJ_ROOT directory")


PRJ_ROOT=find_prj_root()

SRC_DIR=PRJ_ROOT+'/local/src'
BIN_DIR=PRJ_ROOT+'/local/bin'
DATA_DIR=PRJ_ROOT+'/local/share/data'
REF_DIR='/home/egrassi/strata/local/share/data'
DEBUG="yes"

## This dataset:
DATA=PRJ_ROOT+"/local/share/data/targeted_hr"
FQ_DIR=PRJ_ROOT+"/dataset/targeted_hr"
FQ_XENOME_DIR=FQ_DIR+"/xenome"
EXONS=DATA+'/targeted.bed'
SEXONS=FQ_DIR+'/targeted_sorted.bed'
LSEXONS='targeted_sorted.bed'

# sed 1d PJ1903090-SF-Integragen-Targeted-Seq.tsv  | cut -f 1 | tr "_" "\t" | cut -f 1 | tr "\n" "," | sed 's/,/","/g'
SAMPLES_ORIG=["1174064085","1174064077","1174064069","1174064061","1174064053","1174064045","1174064037","1174064029","1174064021","1174064084","1174064076","1174064068","1174064060","1174064052","1174064044","1174064036","1174064028","1174064020","1174064083","1174064075","1174064067","1174064059","1174064051","1174064043","1174064035","1174064027","1174064019","1174064082","1174064074","1174064066","1174064058","1174064050","1174064042","1174064034","1174064026","1174064018","1174064081","1174064073","1174064065","1174064057","1174064049","1174064041","1174064033","1174064025","1174064017","1174064080","1174064072","1174064064","1174064056","1174064048","1174064040","1174064032","1174064024","1174064016","1174064079","1174064071","1174064063","1174064055","1174064047","1174064039","1174064031","1174064023","1174064078","1174064070","1174064062","1174064054","1174064046","1174064038","1174064030","1174064022"]
SAMPLES=["CRC0291LMX0A02201TUMD01000","CRC0504LMX0A02001TUMD10000","CRC0591LMX0A02001TUMD01000","CRC1272LMX0A02002TUMD04000","CRC1774LMX0A02001TUMD01000","CRC0355LMX0A02002TUMD04000","CRC0106LMX0B02201TUMD04000","CRC0123LMX0A02201TUMD01000","CRC0118LMX0A02201TUMD01000","CRC0327LMX0A02201TUMD09000","CRC0484LMX0A02001TUMD05000","CRC1360LMX0B02001TUMD01000","CRC1331LMX0A02002TUMD04000","CRC1889PRX0B01001TUMD01000","CRC1895LMX0B02003TUMD04000","CRC0078LMX0A02202TUMD01000","CRC0114LMX0B02201TUMD01000","CRC0231LMX0A02201TUMD01000","CRC0277LMX0A03202TUMD02000","CRC1446LMX0A02001TUMD04000","CRC0578LMX0A02001TUMD09000","CRC1502LMX0A02001TUMD01000","CRC1989LMX0A02001TUMD01000","CRC2083PRX0A02001TUMD01000","CRC0079LMX0A02201TUMD01000","CRC0031LMX0A02201TUMD04000","CRC0169LMX0A02202TUMD01000","CRC0322LMX0A02201TUMD09000","CRC0542LMX0B02001TUMD05000","CRC0743LMX0A02001TUMD06000","CRC1472LMX0A02001TUMD01000","CRC2025LMX0B01001TUMD04000","CRC2113LMX0B02001TUMD01000","CRC0019LMX0A02202TUMD05000","CRC0069LMX0A02201TUMD06000","CRC0060LMX0B01001TUMD01000","CRC0370LMX0B02001TUMD01000","CRC0544LMX0A02001TUMD04000","CRC1139LMX0A02001TUMD13000","CRC1449LMX0A02001TUMD04000","CRC1868LMX0B02001TUMD04000","CRC2026LMX0A02001TUMD01000","CRC0099LMX0A02201TUMD01000","CRC0028LMX0A02201TUMD01000","CRC0330LMX0A02204TUMD01000","CRC0464LMX0A02001TUMD01000","CRC0534LMX0A02001TUMD01000","CRC1078LMX0A02002TUMD01000","CRC1870LMX0A02002TUMD01000","CRC2069PRX0B01001TUMD04000","CRC2060LMX0A02001TUMD01000","CRC0064LMX0A02201TUMD01000","CRC0119LMX0A02201TUMD01000","CRC1955PRX0A01001TUMD01000","CRC0438LMX0A02001TUMD11000","CRC0568LMX0A02002TUMD01000","CRC0772LMX0A02001TUMD09000","CRC2022LMX0A01001TUMD04000","CRC1921LMX0A02004TUMD01000","CRC0051LMX0A02201TUMD01000","CRC0063LMX0A02201TUMD03000","CRC0175LMX0A02202TUMD01000","CRC0479LMX0A02001TUMD01000","CRC1390LMX0A02001TUMD01000","CRC0729LMX0A02001TUMD01000","CRC2021PRX0B01001TUMD01000","CRC1916LMX0A02001TUMD01000","CRC0077LMX0A02201TUMD01000","CRC0022LMX0A02201TUMD01000","CRC0134LMX0A02201TUMD01000"]
REF=""
SAMPLESD=[]
SAMPS=",".join(SAMPLESD)
XENOMED_SAMPLES=SAMPLES
TRIMMED_SAMPLES=[]

FASTQ_SUFFIX="_{pair}.fastq.gz"
FASTQ_SUFFIX_XENOME="_human_{pair}.fastq"

PAIRS=['R1','R2']
PAIRS_XENOME=['1','2']
CORES=8
MEM=4
# TODO need to adapt to unpaired (do they exists?) reads, will need to change the all rule in the subdirs using an input function...
PATTERNED=2500 
# HiSeq4000, otherwise 100 for unpatterned
#â€“o recal.bam
LOWERAF="0.0000025"

wildcard_constraints:
    sample="[a-zA-Z0-9]+"

# Used references
#https://gdc.cancer.gov/about-data/data-harmonization-and-generation/gdc-reference-files based on
#ftp://ftp.ncbi.nlm.nih.gov/genomes/archive/old_genbank/Eukaryotes/vertebrates_mammals/Homo_sapiens/GRCh38/seqs_for_alignment_pipelines/README_ANALYSIS_SETS
# DBSNP 151 ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606_b151_GRCh38p7/VCF/All_20180418.vcf.gz
ANNOTATIONS=ROOT+"/common/task/annotations/dataset/gdc"

CALLABLE="5:10,10:50,50:100,100:150,150:inf"
CALLABLE_STRICT="50:100,100:150,150:inf"

PADDING=100
MINDP=10

GNOMAD=ROOT+"/common/task/annotations/dataset/gnomad"
VEP_CACHE_DIR=ROOT+"/common/task/variant_annotations/dataset/VEP"
REFFLAT="../../refFlat.txt"
REFFLATGZ=ROOT+"/common/task/annotations/dataset/ucsc/hg38/refFlat.txt.gz"

# Singularity containers
GATK_SING=ROOT+"/gatk4100/gatk.img"


rule all_single_something:
    input: expand("{{dir}}/{sample}.{{something}}", sample=SAMPLES)
    output: "{dir}/all_samples_{something}"
    shell: "mkdir -p {wildcards.dir}; touch {output}"


# Other phases Snakefiles are included here without symbolic links: in this way the right ones need to be
# plugged in the base conf.sk
ALIGN_DIR="align"
include: PRJ_ROOT+"/local/share/snakerule/Snakefile_align_calibrate_WES_basedir"

# then mutect
MUTECT_DIR="mutect"
include: PRJ_ROOT+"/local/share/snakerule/Snakefile_mutect2_WES_basedir"
