import os
ROOT=os.environ.get('BIOINFO_ROOT')
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,".PRJ_ROOT")):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception("Can not find the PRJ_ROOT directory")


PRJ_ROOT=find_prj_root()
TMP="/scratch/home/mviviani/"

SRC_DIR=PRJ_ROOT+'/local/src'
BIN_DIR=PRJ_ROOT+'/local/bin'
FQ_REMOVED=True
DEBUG="yes"
TYPE="WGS"
PAIRED=True
SUBSAMPLE=1 # if == 1 do not downsample (downsampling is done right after alignment and dup removal, not before calling, to also recalibrate on less data).

# Needed references and annotations
GNOMAD_TASK_DIR='/mnt/trcanmed/snaketree/task/annotations/dataset/gnomad'
REF_DIR=GNOMAD_TASK_DIR
GNOMAD=GNOMAD_TASK_DIR
VEP_CACHE_DIR=ROOT+"/task/variant_annotations/dataset/VEP"
ANNOVAR=ROOT+"/task/variant_annotations/dataset/annovar/hg38/humandb/"
PON=GNOMAD_TASK_DIR+"/1000g_pon.hg38.vcf.gz"
DBSNP=GNOMAD_TASK_DIR+'/chr_All_20180418.vcf.bgz'
INTERVAL=GNOMAD_TASK_DIR+'/wgs_calling_regions.hg38.interval_list'
CALLABLE_BED=GNOMAD_TASK_DIR+'/wgs_calling_regions.hg38.bed.gz'
GCFILE=GNOMAD_TASK_DIR+'/sequenza_gc_w200.wig.gz'
# Singularity containers and occam docker images
GATK_SING="/home/egrassi/gatk4140/gatk.img" # TODO normalize singularity images paths
GATK_ODOCKER="egrassi/occamsnakes/gatk_fixedov:1"
XENOME_ODOCKER="egrassi/occamsnakes/xenome:1"
#ALIGN_ODOCKER="egrassi/occamsnakes/align_recalibrate_nodef:1" ### old egrassi/occamsnakes/align_recalibrate:1
ALIGN_ODOCKER="egrassi/occamsnakes/align_recalibrate:1" ### old egrassi/occamsnakes/align_recalibrate:1
SEQUENZA_ODOCKER="egrassi/occamsnakes/sequenza_nodef:1" ### old egrassi/occamsnakes/sequenza:1
VARSCAN_ODOCKER="egrassi/occamsnakes/varscan:1"
PLATYPUS_ODOCKER="egrassi/occamsnakes/platypus:1" ### old egrassi/occamsnakes/platypus:1 (ho dimenticato il _nodef in fase di build)
PLH_DOCKEr="bubusettete"


## this dataset:
DATA=PRJ_ROOT+"/local/share/data/Ilio_linea"
FQ_XENOME_DIR="xenome"
XENOME_PREFIX=""
XENOME_TOOL=""
XENOME_WAIT=""
PICARD='picard -Xmx10g -XX:ParallelGCThreads='

#data@rotpunkt:~/work/snakegatk$ python3 local/src/tsv_to_json_metadata.py -i ~/Dropbox/work/evol/MA/second_shipment/samples/ss_282.txt -j /tmp/p

# TODO link to files in second_shipment directory

# original up to second shipment:
SAMPLES_ORIG=["BIODIV-027-CRC1888NL","BIODIV-037-CRC1888LMO"]
SAMPLES=["CRC1888NL", "CRC1888LMO"]
NORMAL=["CRC1888NL"]*(len(SAMPLES)-1)
# TUMOR=SAMPLES[1:]
#NORMAL=["CRC1888NL"]
TUMOR=["CRC1888LMO"]

#REF=""
#SAMPLESD=[]
#SAMPS=",".join(SAMPLESD)

XENOMED_SAMPLES=[]
TRIMMED_SAMPLES=[]

XENOME_PREFIX=''
XENOME_TOOL=''
XENOME_WAIT=0
PICARD="picard -Xmx10g -XX:ParallelGCThreads=4"

#data@rotpunkt:~/work/snakegatk/local/src$ ./tsv_to_json_metadata.py -i ~/Dropbox/work/evol/MA/second_shipment/samples/ss_282.txt -j /tmp/test

FASTQ_SUFFIX="_{pair}.fastq.gz"
FASTQ_SUFFIX_XENOME="_human_{pair}.fastq"

PAIRS=['R1','R2']
PAIRS_XENOME=['1','2']
CORES=12
CORESMD=4
# TODO need to adapt to unpaired (do they exists?) reads, will need to change the all rule in the subdirs using an input function...
PATTERNED=2500 
# HiSeq4000, otherwise 100 for unpatterned
#â€“o recal.bam


### TODO REMOVE ME FOR BULK!
AFPARAM="--default-af 0"
# https://gatkforums.broadinstitute.org/gatk/discussion/24633/mutect2-4-1-4-0-stats-file-with-a-negative-number#latest
# use --default-af 0 to avoid 0.5 AF calls filtering 

wildcard_constraints:
    sample="[a-zA-Z0-9]+-?[A-Z0-9]+-?[A-Z0-9]+-?[A-Z0-9]?"


CALLABLE="5:10,10:50,50:100,100:150,150:inf"
CALLABLE_STRICT="50:100,100:150,150:inf"

SPLIT=12
SPLIT_INTERVAL=GNOMAD_TASK_DIR+'/GRCh38.d1.vd1.n'+str(SPLIT)
if SPLIT >= 10:
    SPLITS=['000'+str(x) for x in range(0,10)] + ['00'+str(x) for x in range(10,SPLIT)]
else:
    SPLITS=['000'+str(x) for x in range(0, SPLIT)]

#+'-scattered.interval_list'

PLOIDY=2.8	
PURITY=1

rule all_callable_covered:
    input: expand("depth/callable_{depth}.covered.bed.gz", sample=TUMOR, depth=['10x','20x','30x','40x','50x', '60x', '70x', '80x', '90x', '100x','150x','200x'])


SIZE='wgs'
ASSAY="WGS"
