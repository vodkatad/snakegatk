import os
ROOT=os.environ.get('SNAKE_ROOT')
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,".PRJ_ROOT")):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception("Can not find the PRJ_ROOT directory")


PRJ_ROOT=find_prj_root()
TMP="/scratch/home/gcorti"

SRC_DIR=PRJ_ROOT+'/local/src'
BIN_DIR=PRJ_ROOT+'/local/bin'
FQ_REMOVED=True
DEBUG="yes"
TYPE="WES"
PAIRED=True

# Needed references and annotations
GNOMAD_TASK_DIR=ROOT+'/task/annotations/dataset/gnomad'
REF_DIR=GNOMAD_TASK_DIR
GNOMAD=GNOMAD_TASK_DIR
VEP_CACHE_DIR=ROOT+"/task/variant_annotations/dataset/VEP"
ANNOVAR=ROOT+"/task/variant_annotations/dataset/annovar/hg38/humandb/"
PON=GNOMAD_TASK_DIR+"/1000g_pon.hg38.vcf.gz"
DBSNP=GNOMAD_TASK_DIR+'/chr_All_20180418.vcf.bgz'
# Singularity containers and occam docker images
GATK_SING="/home/egrassi/gatk4140/gatk.img" # TODO normalize singularity images paths
XENOME_ODOCKER="egrassi/occamsnakes/xenome:1"
ALIGN_ODOCKER="egrassi/occamsnakes/align_recalibrate:1"
PLH_DOCKER="bubusettete"
#GATK_ODOCKER="gitlab.c3s.unito.it:5000/egrassi/occamsnakes/gatk_fixedov1" # we keep this for this project and accept the filtering bug, even if it's not that small..
GATK_ODOCKER="broadinstitute/gatk:4.1.3.0"
SEQUENZA_ODOCKER="gitlab.c3s.unito.it:5000/egrassi/occamsnakes/sequenza:1" # we keep this for this project and accept the filtering bug, even if it's not that small..


## This dataset:
DATA="/mnt/trcanmed/snaketree/data/biobanca_WES_earlylate/merged_fastq" #PRJ_ROOT+"/local/share/data/biobanca_early-late"
#DATA="/archive/home/gcorti/biobanca_WES_earlylate/fastq" #PRJ_ROOT+"/local/share/data/biobanca_early-late"
FQ_XENOME_DIR="xenome"
PICARD="picard -Xmx10g"
XENOME_PREFIX='/mnt/trcanmed/snaketree/task/sequences/sequences/dataset/gdc/xenomidx'
XENOME_TOOL='/mnt/trcanmed/snaketree/prj/snakegatk/local/src/gossamer/build/src/xenome'
XENOME_WAIT=10800

#CRC0196LMO0B04008001D02000      1740FL-327-01-47
#CRC0196NLH0000000000D02000      1740FL-327-01-79
#CRC0196LMO0B01003001VT0800D     1740FL-327-01-17

#SAMPLES=["CRC1598LMO0A01003001VT0600D","CRC1598LMO0A04011001D01000","CRC1598NLH0000000000D03000", "CRC0196LMO0B04008001D02000", "CRC0196NLH0000000000D02000",  "CRC0196LMO0B01003001VT0800D"]
#SAMPLES_ORIG=["1740FL-327-01-39","1740FL-327-01-40","1740FL-327-01-90", "1740FL-327-01-47", "1740FL-327-01-79", "1740FL-327-01-17"]
#
SAMPLES=["CRC0095LMO0A01003001VT0600_7D","CRC0095LMO0A04010001VT0700_8D","CRC0099LMO0A01003001VT0600D","CRC0099LMO0A04010001VT0300D","CRC0123LMO0A01003001VT0600D","CRC0123LMO0A04012001VT0700_8D",
"CRC0148LMO0A01003001VT0800D","CRC0148LMO0A03010001VT0800D","CRC0152LMO0C01003001VT0800D","CRC0152LMO0C04010001D02000_3","CRC0169LMO0A01003001VT0600_7D","CRC0169LMO0A02009001VT0500_6D","CRC0171LMO0A01003001VT0600_7D",
"CRC0171LMO0A04008001VT0500D","CRC0188LMO0A01003001VT0700D","CRC0188LMO0A04010002VT0200D","CRC0196LMO0B01003001VT0800D","CRC1961NLH0000000000D03000","CRC0464LMO0A01003001VT0700D","CRC0464LMO0A04010001D02000D","CRC0542LMO0C01003001D03000","CRC0542LMO0C03008001VT0400_5D","CRC1169LMO0C01003001VT0800D","CRC1169LMO0C04008001VT0400D","CRC1430LMO0B01003001VT0800D","CRC1430LMO0B04010001VT0400D","CRC1446LMO0A01003001VT0800D","CRC1446LMO0A04009001VT0300D","CRC1449LMO0A01003001VT0800D","CRC1449LMO0A04009001VT0300D","CRC1460LMO0A01003001VT0800D","CRC1460LMO0A04008001VT0300D",

"CRC0123NLH0000000000D02000","CRC0148NLH0000000000D02000","CRC0152NLH0000000000D02000","CRC0169NLH0000000000D02000","CRC0171NLH0000000000D02000","CRC0188NLH0000000000D02000","CRC0196NLH0000000000D02000",
"CRC0464NLH0000000000D05000","CRC0542NLH0000000000RL0100","CRC1169NLH0000000000RL0100","CRC1430NLH0000000000D03000","CRC1446NLH0000000000RL0200D","CRC1449NLH0000000000RL0500D","CRC1460NLH0000000000D03000",
"CRC1502NLH0000000000RL0100","CRC1568NLH0000000000D03000","CRC1588NLH0000000000D03000","CRC1598NLH0000000000D03000","CRC1599NLH0000000000RL0100","CRC1628NLH0000000000D03000"]

SAMPLES_ORIG=["1740FL-327-01-01","1740FL-327-01-02","1740FL-327-01-03","1740FL-327-01-04","1740FL-327-01-05","1740FL-327-01-06","1740FL-327-01-07","1740FL-327-01-08","1740FL-327-01-09","1740FL-327-01-10","1740FL-327-01-11",
"1740FL-327-01-12","1740FL-327-01-13","1740FL-327-01-14","1740FL-327-01-15","1740FL-327-01-16","1740FL-327-01-17","1740FL-327-01-18","1740FL-327-01-19","1740FL-327-01-20","1740FL-327-01-21","1740FL-327-01-22",
"1740FL-327-01-23","1740FL-327-01-24","1740FL-327-01-25","1740FL-327-01-26","1740FL-327-01-27","1740FL-327-01-28","1740FL-327-01-29","1740FL-327-01-30","1740FL-327-01-31","1740FL-327-01-32","1740FL-327-01-33",
"1740FL-327-01-34","1740FL-327-01-35","1740FL-327-01-36","1740FL-327-01-37","1740FL-327-01-38","1740FL-327-01-39","1740FL-327-01-40","1740FL-327-01-41","1740FL-327-01-42","1740FL-327-01-43","1740FL-327-01-44",
"1740FL-327-01-45","1740FL-327-01-46","1740FL-327-01-47","1740FL-327-01-48","1740FL-327-01-49","1740FL-327-01-50","1740FL-327-01-51","1740FL-327-01-52","1740FL-327-01-53","1740FL-327-01-54","1740FL-327-01-55",
"1740FL-327-01-56","1740FL-327-01-57","1740FL-327-01-58","1740FL-327-01-59","1740FL-327-01-60","1740FL-327-01-61","1740FL-327-01-62","1740FL-327-01-63","1740FL-327-01-64","1740FL-327-01-65","1740FL-327-01-66",
"1740FL-327-01-67","1740FL-327-01-68","1740FL-327-01-69","1740FL-327-01-70","1740FL-327-01-71","1740FL-327-01-72","1740FL-327-01-73","1740FL-327-01-74","1740FL-327-01-75","1740FL-327-01-76","1740FL-327-01-77",
"1740FL-327-01-78","1740FL-327-01-79","1740FL-327-01-80","1740FL-327-01-81","1740FL-327-01-82","1740FL-327-01-83","1740FL-327-01-84","1740FL-327-01-85","1740FL-327-01-86","1740FL-327-01-87","1740FL-327-01-88",
"1740FL-327-01-89","1740FL-327-01-90","1740FL-327-01-91","1740FL-327-01-92"]

EXONS=DATA+'/xgen-exome-hyb-panel-v2-targets-hg38.bed'
SEXONS=DATA+'/xgen-exome-hyb-panel-v2-targets-hg38.sorted.bed'

#XENOMED_SAMPLES=SAMPLES
TRIMMED_SAMPLES=[]

def find_pairs():
    import re
    all_h=[]
    all_o=[]
    for sample in SAMPLES:
        if re.search('H', sample):
            all_h.append(sample)
            all_h.append(sample)
        elif re.search('O', sample):
            all_o.append(sample)
        else:
            raise Exception('There is a bad sample here! ' + sample)
    all_h.sort()
    all_o.sort()
    if len(all_o) != len(all_h):
#            print(all_o)
#            print(all_h)
            raise Exception('Not all "O" have their H!')
    for i in range(0,len(all_o)):
        model_o = all_o[i][0:7]
        model_h = all_h[i][0:7]
        if model_o != model_h:
            raise Exception('Your logic is flawed, llama!')
    return(all_h, all_o)

NORMAL_TUMOR_PAIRS = find_pairs()

NORMAL = NORMAL_TUMOR_PAIRS[0]
TUMOR = NORMAL_TUMOR_PAIRS[1]

#XENOMED_SAMPLES=TUMOR # ma se Ã¨ contaminato 'da seq' anche il normale?
XENOMED_SAMPLES=[]

FASTQ_SUFFIX="_{pair}.fastq.gz"
FASTQ_PRE="."
FASTQ_POST=".fastq.gz"
FASTQ_SUFFIX_XENOME="_human_{pair}.fastq"
PASTE_NAMEFQ_EXT="."


PAIRS=['R1','R2']
PAIRS_XENOME=['1','2']

CORES=24
CORESMD = 4

# TODO need to adapt to unpaired (do they exists?) reads, will need to change the all rule in the subdirs using an input function...
PATTERNED=2500 
# HiSeq4000, otherwise 100 for unpatterned

AFPARAM=""
#AFPARAM="--default-af 0"
# https://gatkforums.broadinstitute.org/gatk/discussion/24633/mutect2-4-1-4-0-stats-file-with-a-negative-number#latest
# use --default-af 0 to avoid 0.5 AF calls filtering 

wildcard_constraints:
    sample="CRC[a-zA-Z0-9_]+",
    pair="R[12]"

CALLABLE="5:10,10:50,50:100,100:150,150:inf"
CALLABLE_STRICT="50:100,100:150,150:inf"
PADDING=100

GENES="genes.tsv"
rule g:
    output: "genes.tsv"
    params: wes=EXONS
    shell: "echo {params.wes} > {output}"

NAME = "biobanca_early-late"
SIZE = 34
ASSAY = "WES"
GCFILE = GNOMAD_TASK_DIR+'/sequenza_gc_w50.wig.gz' 
SAINT_THOMAS="yes"

rule mut_burden_tot:
    input: tsize="targeted_size.txt", muts="mutect_paired/merged.table_nomultiallele"
    output: "mutect_paired/tot_mut_burden.tsv"
    run:
        import pandas as pd
        import numpy as np
        data = pd.read_csv(input.muts, sep="\t", index_col=0)
        tot = np.count_nonzero(data, axis=0)
        target_len = 0
        with open(input.tsize, 'r') as tsize:
            line = tsize.readline()
            target_len = float(line.rstrip())
        target_len = target_len / 1000000
        res = pd.DataFrame(data = {'totmut': tot, 'burden': tot/target_len}, index=data.columns)
        res.to_csv(output[0], sep="\t", index=True)

rule bed:
    input: "mutect_paired/merged.table_nomultiallele"
    output: "muts.bed"
    shell: 
        """
            sed 1d {input} | cut -f 1 | tr ":" "\\t" | bawk '{{print $1, $2-1, $2}}' > {output}
        """

rule annotatr:
    input: gained_bed="muts.bed"
    params: custom_annot="no"
    output: plot_n="muts.genomicregions.svg", plot_corr="muts.genomicregionsnorm.svg"
    script: SRC_DIR+"/annotatr.R"


### FGFR4 investigations
rule allfgfr:
    input: expand("misc/{sample}.tsv", sample=SAMPLES)
    output: "all_fgfr_info.tsv" 


rule fgfr:
    input: bam="align/realigned_{sample}.sorted.bam", muts="/home/egrassi/FGFR_muts.tsv"
    output: "misc/{sample}.tsv"
    shell: 
        """
            /scratch/trcanmed/task/common_tools/local/src/count_bam_many_ref.py {input.bam} {input.muts} > {output}
        """
